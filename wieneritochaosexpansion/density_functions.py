# -*- coding,  utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt, exp, log, pi

def pdf_GBM(x, t, s0, v0, r0):
    return (1/48)*sqrt(2)*(-3*s0**6*t**3*v0**6*exp(6*r0*t) + 105*s0**6*t**2*v0**4*exp(6*r0*t) - 41*s0**6*t*v0**2*exp(6*r0*t) + 3*s0**6*exp(6*r0*t) - 126*s0**5*t**2*v0**4*x*exp(5*r0*t) + 152*s0**5*t*v0**2*x*exp(5*r0*t) - 18*s0**5*x*exp(5*r0*t) + 45*s0**4*t**2*v0**4*x**2*exp(4*r0*t) - 210*s0**4*t*v0**2*x**2*exp(4*r0*t) + 45*s0**4*x**2*exp(4*r0*t) + 128*s0**3*t*v0**2*x**3*exp(3*r0*t) - 60*s0**3*x**3*exp(3*r0*t) - 29*s0**2*t*v0**2*x**4*exp(2*r0*t) + 45*s0**2*x**4*exp(2*r0*t) - 18*s0*x**5*exp(r0*t) + 3*x**6)*exp(-7*r0*t - 1/2/(t*v0**2) + x*exp(-r0*t)/(s0*t*v0**2) - 1/2*x**2*exp(-2*r0*t)/(s0**2*t*v0**2))/(sqrt(pi)*s0**7*(t*v0**2)**(5/2))

def pdf_SquareRootProcess(x, t, s0, v0, r0):
    return 0.25*sqrt(2)*((1/8)*r0*s0*v0**2*(r0**3*s0**3*(-1 + x*exp(-r0*t)/s0)**2*exp(3*r0*t)/(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)) - 1)*(exp(2*r0*t) - 2*exp(r0*t) + 1)*exp(r0*t)/(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4) + (1/1280)*r0*s0*v0**2*(r0**6*s0**6*(-1 + x*exp(-r0*t)/s0)**4*exp(6*r0*t)/(v0**4*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)**2) - 6*r0**3*s0**3*(-1 + x*exp(-r0*t)/s0)**2*exp(3*r0*t)/(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)) + 3)*(240*r0**2*s0**2*exp(5*r0*t) - 720*r0**2*s0**2*exp(4*r0*t) + 720*r0**2*s0**2*exp(3*r0*t) - 240*r0**2*s0**2*exp(2*r0*t) - 30*r0*s0*v0**2*exp(5*r0*t) + 120*r0*s0*v0**2*exp(4*r0*t) - 180*r0*s0*v0**2*exp(3*r0*t) + 120*r0*s0*v0**2*exp(2*r0*t) - 30*r0*s0*v0**2*exp(r0*t) + v0**4*exp(5*r0*t) - 5*v0**4*exp(4*r0*t) + 10*v0**4*exp(3*r0*t) - 10*v0**4*exp(2*r0*t) + 5*v0**4*exp(r0*t) - v0**4)*exp(r0*t)/(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)**2 + (1/1048576)*r0*s0*v0**2*(r0**9*s0**9*(-1 + x*exp(-r0*t)/s0)**6*exp(9*r0*t)/(v0**6*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)**3) - 15*r0**6*s0**6*(-1 + x*exp(-r0*t)/s0)**4*exp(6*r0*t)/(v0**4*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)**2) + 45*r0**3*s0**3*(-1 + x*exp(-r0*t)/s0)**2*exp(3*r0*t)/(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)) - 15)*(256*r0**2*s0**2*exp(4*r0*t) - 512*r0**2*s0**2*exp(3*r0*t) + 256*r0**2*s0**2*exp(2*r0*t) - 32*r0*s0*v0**2*exp(4*r0*t) + 96*r0*s0*v0**2*exp(3*r0*t) - 96*r0*s0*v0**2*exp(2*r0*t) + 32*r0*s0*v0**2*exp(r0*t) + v0**4*exp(4*r0*t) - 4*v0**4*exp(3*r0*t) + 6*v0**4*exp(2*r0*t) - 4*v0**4*exp(r0*t) + v0**4)**2*exp(r0*t)/(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)**3 + 2 + (1/512)*v0**4*(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)*exp(-3*r0*t)/(r0**3*s0**3))**(-2.0)*(-1 + x*exp(-r0*t)/s0)*(r0**3*s0**3*(-1 + x*exp(-r0*t)/s0)**2*exp(3*r0*t)/(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)) - 3)*(256*r0**2*s0**2*exp(4*r0*t) - 512*r0**2*s0**2*exp(3*r0*t) + 256*r0**2*s0**2*exp(2*r0*t) - 32*r0*s0*v0**2*exp(4*r0*t) + 96*r0*s0*v0**2*exp(3*r0*t) - 96*r0*s0*v0**2*exp(2*r0*t) + 32*r0*s0*v0**2*exp(r0*t) + v0**4*exp(4*r0*t) - 4*v0**4*exp(3*r0*t) + 6*v0**4*exp(2*r0*t) - 4*v0**4*exp(r0*t) + v0**4)*exp(-4*r0*t)/(r0**4*s0**4))*exp(-0.5*r0**3*s0**3*(-1 + x*exp(-r0*t)/s0)**2*exp(3*r0*t)/(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)) - r0*t)/(sqrt(pi)*s0*sqrt(v0**2*(r0**2*s0**2*exp(3*r0*t) - r0**2*s0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(3*r0*t) + (1/4)*r0*s0*v0**2*exp(2*r0*t) - 1/8*r0*s0*v0**2*exp(r0*t) + (1/192)*v0**4*exp(3*r0*t) - 1/64*v0**4*exp(2*r0*t) + (1/64)*v0**4*exp(r0*t) - 1/192*v0**4)*exp(-3*r0*t)/(r0**3*s0**3)))

def pdf_SABR(x, t, s0, alpha, beta, nu, rho):
    return 0.5*sqrt(6)*(5.19615242270663*sqrt(3)*alpha**3*t**2*(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))/s0**20)**(-2.0)*(-3 + 12*s0**20*(-1 + x/s0)**2/(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))))*(-1 + x/s0)*(alpha**5*beta**3*s0**(8*beta + 25)*t**2*(beta**2 - 2*beta + 1) + alpha**4*beta**2*nu*rho*s0**(7*beta + 26)*t**2*(5*beta**2 - 6*beta + 1) + 4*alpha**3*beta**2*s0**(6*beta + 27)*t*(2*beta*nu**2*rho**2*t + 2*beta - nu**2*rho**2*t - 2) + 4*alpha**2*beta*nu*rho*s0**(5*beta + 28)*t*(beta*nu**2*rho**2*t + 6*beta - 2) + 16*alpha*beta*s0**(4*beta + 29)*(nu**2*rho**2*t + 1) + 16*nu*rho*s0**(3*beta + 30))/s0**33 + 6*s0**(2*beta + 16)*t*(-1 + 12*s0**20*(-1 + x/s0)**2/(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))))*(alpha**2*beta**2*s0**(2*beta) + 2*alpha*beta*nu*rho*s0**(beta + 1) + nu**2*s0**2)/(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18)) + 2 + (27/16)*t*(-15 + 540*s0**20*(-1 + x/s0)**2/(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))) - 2160*s0**40*(-1 + x/s0)**4/(alpha**4*t**2*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))**2) + 1728*s0**60*(-1 + x/s0)**6/(alpha**6*t**3*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))**3))*(alpha**5*beta**3*s0**(8*beta + 25)*t**2*(beta**2 - 2*beta + 1) + alpha**4*beta**2*nu*rho*s0**(7*beta + 26)*t**2*(5*beta**2 - 6*beta + 1) + 4*alpha**3*beta**2*s0**(6*beta + 27)*t*(2*beta*nu**2*rho**2*t + 2*beta - nu**2*rho**2*t - 2) + 4*alpha**2*beta*nu*rho*s0**(5*beta + 28)*t*(beta*nu**2*rho**2*t + 6*beta - 2) + 16*alpha*beta*s0**(4*beta + 29)*(nu**2*rho**2*t + 1) + 16*nu*rho*s0**(3*beta + 30))**2/(s0**6*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))**3) + 144*s0**40*((1/240)*alpha**4*s0**(4*beta - 10)*t**3*(12*alpha**6*beta**4*s0**(6*beta)*t**2*(beta**2 - 2*beta + 1) + 6*alpha**5*beta**3*nu*rho*s0**(5*beta + 1)*t**2*(13*beta**2 - 18*beta + 5) + alpha**4*beta**2*s0**(4*beta + 2)*t*(175*beta**2*nu**2*rho**2*t + 8*beta**2*nu**2*t + 90*beta**2 - 134*beta*nu**2*rho**2*t - 16*beta*nu**2*t - 90*beta + 7*nu**2*rho**2*t + 8*nu**2*t) + 4*alpha**3*beta**2*nu*rho*s0**(3*beta + 3)*t*(37*beta*nu**2*rho**2*t + 8*beta*nu**2*t + 105*beta - 7*nu**2*rho**2*t - 8*nu**2*t - 60) + 2*alpha**2*beta*s0**(2*beta + 4)*(40*beta**3 + 14*beta*nu**4*rho**4*t**2 + 16*beta*nu**4*rho**2*t**2 + 275*beta*nu**2*rho**2*t + 25*beta*nu**2*t + 80*beta - 35*nu**2*rho**2*t - 25*nu**2*t) + 20*alpha*beta*nu*rho*s0**(beta + 5)*(7*nu**2*rho**2*t + 5*nu**2*t + 24) + 80*nu**2*s0**6*(2*rho**2 + 1)) + (1/192)*alpha**4*t**3*(alpha**8*beta**4*s0**(12*beta + 60)*t**3*(2*beta**4 - 7*beta**3 + 9*beta**2 - 5*beta + 1) + 3*alpha**7*beta**4*nu*rho*s0**(11*beta + 61)*t**3*(5*beta**3 - 13*beta**2 + 11*beta - 3) + alpha**6*beta**3*s0**(10*beta + 62)*t**2*(43*beta**3*nu**2*rho**2*t + 24*beta**3 - 75*beta**2*nu**2*rho**2*t - 60*beta**2 + 33*beta*nu**2*rho**2*t + 48*beta - nu**2*rho**2*t - 12) + 2*alpha**5*beta**3*nu*rho*s0**(9*beta + 63)*t**2*(29*beta**2*nu**2*rho**2*t + 66*beta**2 - 28*beta*nu**2*rho**2*t - 108*beta + 3*nu**2*rho**2*t + 42) + 12*alpha**4*beta**2*s0**(8*beta + 64)*t*(3*beta**2*nu**4*rho**4*t**2 + 21*beta**2*nu**2*rho**2*t + 8*beta**2 - beta*nu**4*rho**4*t**2 - 18*beta*nu**2*rho**2*t - 12*beta + nu**2*rho**2*t + 4) + 8*alpha**3*beta**2*nu*rho*s0**(7*beta + 65)*t*(beta*nu**4*rho**4*t**2 + 24*beta*nu**2*rho**2*t + 42*beta - 6*nu**2*rho**2*t - 30) + 16*alpha**2*beta*s0**(6*beta + 66)*(3*beta*nu**4*rho**4*t**2 + 21*beta*nu**2*rho**2*t + 8*beta - 3*nu**2*rho**2*t - 4) + 96*alpha*beta*nu*rho*s0**(5*beta + 67)*(nu**2*rho**2*t + 2) + 64*nu**2*rho**2*s0**(4*beta + 68))/s0**72)*(3 - 72*s0**20*(-1 + x/s0)**2/(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))) + 144*s0**40*(-1 + x/s0)**4/(alpha**4*t**2*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))**2))/(alpha**4*t**2*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))**2))*exp(-6.0*s0**20*(-1 + x/s0)**2/(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))))/(sqrt(pi)*s0*sqrt(alpha**2*t*(alpha**4*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 4*alpha**3*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*alpha**2*beta*s0**(4*beta + 16)*t*(2*beta*nu**2*rho**2*t + 3*beta - 3) + 12*alpha*beta*nu*rho*s0**(3*beta + 17)*t + 12*s0**(2*beta + 18))/s0**20))

def pdf_ZABR(x, t, s0, alpha, beta, nu, rho, gamma):
    return 0.5*sqrt(6)*(144*s0**40*((1/240)*s0**(4*beta - 10)*t**3*(12*alpha**10*beta**4*s0**(6*beta)*t**2*(beta**2 - 2*beta + 1) + 6*alpha**(gamma + 8)*beta**3*nu*rho*s0**(5*beta + 1)*t**2*(13*beta**2 - 18*beta + 5) + 80*alpha**(2*gamma + 2)*nu**2*s0**6*(2*rho**2 + 1) + 4*beta**2*nu*rho*s0**(3*beta + 3)*t*(105*alpha**(gamma + 6)*beta - 60*alpha**(gamma + 6) + 37*alpha**(3*gamma + 4)*beta*nu**2*rho**2*t + 8*alpha**(3*gamma + 4)*beta*nu**2*t - 7*alpha**(3*gamma + 4)*nu**2*rho**2*t - 8*alpha**(3*gamma + 4)*nu**2*t) + beta**2*s0**(4*beta + 2)*t*(90*alpha**8*beta**2 - 90*alpha**8*beta + 175*alpha**(2*gamma + 6)*beta**2*nu**2*rho**2*t + 8*alpha**(2*gamma + 6)*beta**2*nu**2*t - 134*alpha**(2*gamma + 6)*beta*nu**2*rho**2*t - 16*alpha**(2*gamma + 6)*beta*nu**2*t + 7*alpha**(2*gamma + 6)*nu**2*rho**2*t + 8*alpha**(2*gamma + 6)*nu**2*t) + 20*beta*nu*rho*s0**(beta + 5)*(24*alpha**(gamma + 4) + 7*alpha**(3*gamma + 2)*nu**2*rho**2*t + 5*alpha**(3*gamma + 2)*nu**2*t) + 2*beta*s0**(2*beta + 4)*(40*alpha**6*beta**3 + 80*alpha**6*beta + 275*alpha**(2*gamma + 4)*beta*nu**2*rho**2*t + 25*alpha**(2*gamma + 4)*beta*nu**2*t - 35*alpha**(2*gamma + 4)*nu**2*rho**2*t - 25*alpha**(2*gamma + 4)*nu**2*t + 14*alpha**(4*gamma + 2)*beta*nu**4*rho**4*t**2 + 16*alpha**(4*gamma + 2)*beta*nu**4*rho**2*t**2)) + (1/192)*t**3*(alpha**12*beta**4*s0**(12*beta + 60)*t**3*(2*beta**4 - 7*beta**3 + 9*beta**2 - 5*beta + 1) + 3*alpha**(gamma + 10)*beta**4*nu*rho*s0**(11*beta + 61)*t**3*(5*beta**3 - 13*beta**2 + 11*beta - 3) + 64*alpha**(2*gamma + 2)*gamma*nu**2*rho**2*s0**(4*beta + 68) + 2*beta**3*nu*rho*s0**(9*beta + 63)*t**2*(66*alpha**(gamma + 8)*beta**2 - 108*alpha**(gamma + 8)*beta + 42*alpha**(gamma + 8) + 3*alpha**(3*gamma + 6)*beta**2*gamma*nu**2*rho**2*t + 26*alpha**(3*gamma + 6)*beta**2*nu**2*rho**2*t - 6*alpha**(3*gamma + 6)*beta*gamma*nu**2*rho**2*t - 22*alpha**(3*gamma + 6)*beta*nu**2*rho**2*t + 3*alpha**(3*gamma + 6)*gamma*nu**2*rho**2*t) + beta**3*s0**(10*beta + 62)*t**2*(24*alpha**10*beta**3 - 60*alpha**10*beta**2 + 48*alpha**10*beta - 12*alpha**10 + alpha**(2*gamma + 8)*beta**3*gamma*nu**2*rho**2*t + 42*alpha**(2*gamma + 8)*beta**3*nu**2*rho**2*t - 3*alpha**(2*gamma + 8)*beta**2*gamma*nu**2*rho**2*t - 72*alpha**(2*gamma + 8)*beta**2*nu**2*rho**2*t + 3*alpha**(2*gamma + 8)*beta*gamma*nu**2*rho**2*t + 30*alpha**(2*gamma + 8)*beta*nu**2*rho**2*t - alpha**(2*gamma + 8)*gamma*nu**2*rho**2*t) + 8*beta**2*nu*rho*s0**(7*beta + 65)*t*(42*alpha**(gamma + 6)*beta - 30*alpha**(gamma + 6) + 6*alpha**(3*gamma + 4)*beta*gamma*nu**2*rho**2*t + 18*alpha**(3*gamma + 4)*beta*nu**2*rho**2*t - 6*alpha**(3*gamma + 4)*gamma*nu**2*rho**2*t + alpha**(5*gamma + 2)*beta*gamma*nu**4*rho**4*t**2) + 12*beta**2*s0**(8*beta + 64)*t*(8*alpha**8*beta**2 - 12*alpha**8*beta + 4*alpha**8 + alpha**(2*gamma + 6)*beta**2*gamma*nu**2*rho**2*t + 20*alpha**(2*gamma + 6)*beta**2*nu**2*rho**2*t - 2*alpha**(2*gamma + 6)*beta*gamma*nu**2*rho**2*t - 16*alpha**(2*gamma + 6)*beta*nu**2*rho**2*t + alpha**(2*gamma + 6)*gamma*nu**2*rho**2*t + alpha**(4*gamma + 4)*beta**2*gamma*nu**4*rho**4*t**2 + 2*alpha**(4*gamma + 4)*beta**2*nu**4*rho**4*t**2 - alpha**(4*gamma + 4)*beta*gamma*nu**4*rho**4*t**2) + 96*beta*nu*rho*s0**(5*beta + 67)*(2*alpha**(gamma + 4) + alpha**(3*gamma + 2)*gamma*nu**2*rho**2*t) + 16*beta*s0**(6*beta + 66)*(8*alpha**6*beta - 4*alpha**6 + 3*alpha**(2*gamma + 4)*beta*gamma*nu**2*rho**2*t + 18*alpha**(2*gamma + 4)*beta*nu**2*rho**2*t - 3*alpha**(2*gamma + 4)*gamma*nu**2*rho**2*t + 3*alpha**(4*gamma + 2)*beta*gamma*nu**4*rho**4*t**2))/s0**72)*(144*s0**40*(-1 + x/s0)**4/(t**2*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))**2) - 72*s0**20*(-1 + x/s0)**2/(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))) + 3)/(t**2*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))**2) + 6*s0**11*t*(12*s0**20*(-1 + x/s0)**2/(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))) - 1)*(alpha**4*beta**2*s0**(4*beta + 5) + alpha**(2*gamma)*nu**2*s0**(2*beta + 7) + 2*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 6))/(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t)) + 2 + (27/16)*t*(1728*s0**60*(-1 + x/s0)**6/(t**3*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))**3) - 2160*s0**40*(-1 + x/s0)**4/(t**2*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))**2) + 540*s0**20*(-1 + x/s0)**2/(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))) - 15)*(alpha**8*beta**3*s0**(8*beta + 25)*t**2*(beta**2 - 2*beta + 1) + 16*alpha**(gamma + 2)*nu*rho*s0**(3*beta + 30) + alpha**(gamma + 6)*beta**2*nu*rho*s0**(7*beta + 26)*t**2*(5*beta**2 - 6*beta + 1) + 4*beta**2*s0**(6*beta + 27)*t*(2*alpha**6*beta - 2*alpha**6 + 2*alpha**(2*gamma + 4)*beta*nu**2*rho**2*t - alpha**(2*gamma + 4)*nu**2*rho**2*t) + 4*beta*nu*rho*s0**(5*beta + 28)*t*(6*alpha**(gamma + 4)*beta - 2*alpha**(gamma + 4) + alpha**(3*gamma + 2)*beta*nu**2*rho**2*t) + 16*beta*s0**(4*beta + 29)*(alpha**4 + alpha**(2*gamma + 2)*nu**2*rho**2*t))**2/(s0**6*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))**3) + 5.19615242270663*sqrt(3)*t**2*(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))/s0**20)**(-2.0)*(-1 + x/s0)*(12*s0**20*(-1 + x/s0)**2/(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))) - 3)*(alpha**8*beta**3*s0**(8*beta + 25)*t**2*(beta**2 - 2*beta + 1) + 16*alpha**(gamma + 2)*nu*rho*s0**(3*beta + 30) + alpha**(gamma + 6)*beta**2*nu*rho*s0**(7*beta + 26)*t**2*(5*beta**2 - 6*beta + 1) + 4*beta**2*s0**(6*beta + 27)*t*(2*alpha**6*beta - 2*alpha**6 + 2*alpha**(2*gamma + 4)*beta*nu**2*rho**2*t - alpha**(2*gamma + 4)*nu**2*rho**2*t) + 4*beta*nu*rho*s0**(5*beta + 28)*t*(6*alpha**(gamma + 4)*beta - 2*alpha**(gamma + 4) + alpha**(3*gamma + 2)*beta*nu**2*rho**2*t) + 16*beta*s0**(4*beta + 29)*(alpha**4 + alpha**(2*gamma + 2)*nu**2*rho**2*t))/s0**33)*exp(-6.0*s0**20*(-1 + x/s0)**2/(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))))/(sqrt(pi)*s0*sqrt(t*(alpha**6*beta**2*s0**(6*beta + 14)*t**2*(beta**2 - 2*beta + 1) + 12*alpha**2*s0**(2*beta + 18) + 12*alpha**(gamma + 2)*beta*nu*rho*s0**(3*beta + 17)*t + 4*alpha**(gamma + 4)*beta**2*nu*rho*s0**(5*beta + 15)*t**2*(beta - 1) + 2*beta*s0**(4*beta + 16)*t*(3*alpha**4*beta - 3*alpha**4 + 2*alpha**(2*gamma + 2)*beta*nu**2*rho**2*t))/s0**20))

def pdf_Heston(x, t, s0, v0, kappa, theta, nu, rho):
    return 0.25*sqrt(2)*exp(-0.5*(-1 + x/s0)**2/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0))*(2 + (3 - 6*(-1 + x/s0)**2/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0) + (-1 + x/s0)**4/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**2)*((1/16)*t*v0*(48*nu*v0*rho - 10*t*nu**2*v0 - 15*t*nu**3*rho - 80*t*v0**2*kappa + 40*t*nu*v0**2*rho + 60*t*nu**2*v0*rho**2 + 80*t*v0*theta*kappa + 72*t*nu*rho*theta*kappa - 88*t*nu*v0*rho*kappa + 32*v0**2) + (1/96)*exp(-3*t*kappa)*(-96*v0*theta**2 + 96*v0**2*theta + 96*exp(t*kappa)*(3*v0*theta**2 - 3*v0**2*theta - theta**3 + v0**3) + 96*exp(2*t*kappa)*(-3*v0*theta**2 + 3*v0**2*theta + theta**3 - v0**3) + 32*exp(3*t*kappa)*(3*v0*theta**2 - 3*v0**2*theta - theta**3 + v0**3) + t*exp(3*t*kappa)*kappa**3*(48*nu**2*v0 - 12*t*nu**4 + 32*t**2*theta**3 + 384*nu*v0**2*rho + 48*nu**2*v0*rho**2 - 84*t*nu**2*v0**2 - 9*t*nu**4*rho**2 - 960*t*v0**3*kappa + 96*t*nu*v0**2*rho + 336*t*nu*v0**3*rho + 24*t*nu**2*theta*kappa - 72*t*nu**2*v0*kappa + 24*t*nu**2*v0*rho**2 + 336*t*nu**2*v0**2*rho**2 - 36*t*nu**3*v0*rho + 36*t*nu**3*v0*rho**3 + 960*t*v0**2*theta*kappa - 720*t*nu*v0**2*rho*kappa + 24*t*nu**2*rho**2*theta*kappa - 48*t*nu**2*v0*rho**2*kappa + 576*t*nu*v0*rho*theta*kappa + 384*v0**3) + 96*t*exp(t*kappa)*theta*kappa*(-2*v0*theta + theta**2 + v0**2) + 192*t*exp(2*t*kappa)*theta*kappa*(2*v0*theta - theta**2 - v0**2) + 96*t*exp(3*t*kappa)*theta*kappa*(-2*v0*theta + theta**2 + v0**2) + 96*t**2*exp(2*t*kappa)*theta**2*kappa**2*(theta - v0) + 96*t**2*exp(3*t*kappa)*theta**2*kappa**2*(-theta + v0) + 32*theta**3 - 32*v0**3)/kappa**3)/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**2 + (1/1024)*t**2*(16*nu*v0*rho - 6*t*nu**2*v0 - 3*t*nu**3*rho - 48*t*v0**2*kappa + 24*t*nu*v0**2*rho + 12*t*nu**2*v0*rho**2 + 48*t*v0*theta*kappa + 8*t*nu*rho*theta*kappa - 16*t*nu*v0*rho*kappa + 32*v0**2)**2*(-15 + 45*(-1 + x/s0)**2/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0) - 15*(-1 + x/s0)**4/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**2 + (-1 + x/s0)**6/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**3)/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**3 + (1/16)*t*(-1 + x/s0)*(16*nu*v0*rho - 6*t*nu**2*v0 - 3*t*nu**3*rho - 48*t*v0**2*kappa + 24*t*nu*v0**2*rho + 12*t*nu**2*v0*rho**2 + 48*t*v0*theta*kappa + 8*t*nu*rho*theta*kappa - 16*t*nu*v0*rho*kappa + 32*v0**2)*(-3 + (-1 + x/s0)**2/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0))*(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)**(-2.0) + (1/8)*exp(-2*t*kappa)*(4*(theta - v0)*(-2*v0*theta + theta**2 + v0**2)**2 + exp(t*kappa)*nu**2*(theta - 2*v0)*(-2*v0*theta + theta**2 + v0**2) + 8*exp(t*kappa)*(theta - v0)*(2*v0*theta + 2*nu*rho*theta - nu*v0*rho - theta**2 - v0**2)*(-2*v0*theta + theta**2 + v0**2) + exp(2*t*kappa)*nu**2*(-theta + 2*v0)*(-2*v0*theta + theta**2 + v0**2) + 4*exp(2*t*kappa)*(theta - v0)*(-2*v0*theta - 4*nu*rho*theta + 2*nu*v0*rho + theta**2 + v0**2)*(-2*v0*theta + theta**2 + v0**2) + exp(2*t*kappa)*nu**2*v0**2*(-log((v0 - theta*(1 - exp(t*kappa)))/theta) + log(v0/theta))*(theta - v0) + 8*t*exp(t*kappa)*kappa*(theta - v0)*(-v0*theta + nu*rho*theta - nu*v0*rho + theta**2)*(-2*v0*theta + theta**2 + v0**2) + t*exp(2*t*kappa)*nu**2*kappa*(theta - v0)*(-2*v0*theta + theta**2 + 2*v0**2) + 4*t**2*exp(2*t*kappa)*theta**2*kappa**2*(theta - v0)*(-2*v0*theta + theta**2 + v0**2) + 8*t*exp(2*t*kappa)*theta*kappa*(theta - v0)*(-theta + v0 + nu*rho)*(-2*v0*theta + theta**2 + v0**2))*(-1 + (-1 + x/s0)**2/(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0))/(kappa**2*(theta - v0)*(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)*(-2*v0*theta + theta**2 + v0**2)))/(s0*sqrt(pi*(v0 + (-1/4)*t*nu**2 + t*theta*kappa - t*v0*kappa + (1/8)*t**2*nu**2*kappa + (-1/8)*t**2*nu**3*rho + (1/64)*t**2*nu**4/v0 + (-1/2)*t**2*theta*kappa**2 + (1/2)*t**2*v0*kappa**2 + t*nu*v0*rho + (1/4)*t**2*nu**2*v0*rho**2 + (1/2)*t**2*nu*rho*theta*kappa - t**2*nu*v0*rho*kappa + (1/8)*t**2*nu**2*theta*kappa/v0)))
    # return 0.25*sqrt(2)*((1/1024)*t**2*(x**6/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**3 - 15*x**4/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**2 + 45*x**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0) - 15)*(8*kappa*nu*rho*t*theta - 16*kappa*nu*rho*t*v0 + 48*kappa*t*theta*v0 - 48*kappa*t*v0**2 - 3*nu**3*rho*t + 12*nu**2*rho**2*t*v0 - 6*nu**2*t*v0 + 24*nu*rho*t*v0**2 + 16*nu*rho*v0 + 32*v0**2)**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**3 + (1/16)*t*x*(x**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0) - 3)*(8*kappa*nu*rho*t*theta - 16*kappa*nu*rho*t*v0 + 48*kappa*t*theta*v0 - 48*kappa*t*v0**2 - 3*nu**3*rho*t + 12*nu**2*rho**2*t*v0 - 6*nu**2*t*v0 + 24*nu*rho*t*v0**2 + 16*nu*rho*v0 + 32*v0**2)*(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**(-2.0) + ((1/16)*t*v0*(72*kappa*nu*rho*t*theta - 88*kappa*nu*rho*t*v0 + 80*kappa*t*theta*v0 - 80*kappa*t*v0**2 - 15*nu**3*rho*t + 60*nu**2*rho**2*t*v0 - 10*nu**2*t*v0 + 40*nu*rho*t*v0**2 + 48*nu*rho*v0 + 32*v0**2) + (1/96)*(kappa**3*t*(24*kappa*nu**2*rho**2*t*theta - 48*kappa*nu**2*rho**2*t*v0 + 24*kappa*nu**2*t*theta - 72*kappa*nu**2*t*v0 + 576*kappa*nu*rho*t*theta*v0 - 720*kappa*nu*rho*t*v0**2 + 960*kappa*t*theta*v0**2 - 960*kappa*t*v0**3 - 9*nu**4*rho**2*t - 12*nu**4*t + 36*nu**3*rho**3*t*v0 - 36*nu**3*rho*t*v0 + 336*nu**2*rho**2*t*v0**2 + 24*nu**2*rho**2*t*v0 + 48*nu**2*rho**2*v0 - 84*nu**2*t*v0**2 + 48*nu**2*v0 + 336*nu*rho*t*v0**3 + 96*nu*rho*t*v0**2 + 384*nu*rho*v0**2 + 32*t**2*theta**3 + 384*v0**3)*exp(3*kappa*t) + 96*kappa**2*t**2*theta**2*(-theta + v0)*exp(3*kappa*t) + 96*kappa**2*t**2*theta**2*(theta - v0)*exp(2*kappa*t) + 192*kappa*t*theta*(-theta**2 + 2*theta*v0 - v0**2)*exp(2*kappa*t) + 96*kappa*t*theta*(theta**2 - 2*theta*v0 + v0**2)*exp(3*kappa*t) + 96*kappa*t*theta*(theta**2 - 2*theta*v0 + v0**2)*exp(kappa*t) + 32*theta**3 - 96*theta**2*v0 + 96*theta*v0**2 - 32*v0**3 + 32*(-theta**3 + 3*theta**2*v0 - 3*theta*v0**2 + v0**3)*exp(3*kappa*t) + 96*(-theta**3 + 3*theta**2*v0 - 3*theta*v0**2 + v0**3)*exp(kappa*t) + 96*(theta**3 - 3*theta**2*v0 + 3*theta*v0**2 - v0**3)*exp(2*kappa*t))*exp(-3*kappa*t)/kappa**3)*(x**4/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**2 - 6*x**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0) + 3)/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)**2 + 2 + (1/8)*(x**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0) - 1)*(4*kappa**2*t**2*theta**2*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + kappa*nu**2*t*(theta - v0)*(theta**2 - 2*theta*v0 + 2*v0**2)*exp(2*kappa*t) + 8*kappa*t*theta*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(nu*rho - theta + v0)*exp(2*kappa*t) + 8*kappa*t*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(nu*rho*theta - nu*rho*v0 + theta**2 - theta*v0)*exp(kappa*t) + nu**2*v0**2*(theta - v0)*(log(v0/theta) - log((-theta*(1 - exp(kappa*t)) + v0)/theta))*exp(2*kappa*t) + nu**2*(-theta + 2*v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + nu**2*(theta - 2*v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(kappa*t) + 4*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)**2 + 4*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(-4*nu*rho*theta + 2*nu*rho*v0 + theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + 8*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(2*nu*rho*theta - nu*rho*v0 - theta**2 + 2*theta*v0 - v0**2)*exp(kappa*t))*exp(-2*kappa*t)/(kappa**2*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0)))*exp(-0.5*x**2/(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0))/(sqrt(pi)*s0*sqrt(-1/2*kappa**2*t**2*theta + (1/2)*kappa**2*t**2*v0 + (1/8)*kappa*nu**2*t**2*theta/v0 + (1/8)*kappa*nu**2*t**2 + (1/2)*kappa*nu*rho*t**2*theta - kappa*nu*rho*t**2*v0 + kappa*t*theta - kappa*t*v0 + (1/64)*nu**4*t**2/v0 - 1/8*nu**3*rho*t**2 + (1/4)*nu**2*rho**2*t**2*v0 - 1/4*nu**2*t + nu*rho*t*v0 + v0))
    # return 0.25*sqrt(2)*((1/589824)*t**2*v0**4*(v0**6*x**6/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))**3 - 15*v0**4*x**4/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))**2 + 45*v0**2*x**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0)) - 15)*(-128*kappa**2*nu*rho*t**2*theta*v0 + 192*kappa**2*nu*rho*t**2*v0**2 + 384*kappa**2*t**2*theta**2*v0 - 1280*kappa**2*t**2*theta*v0**2 + 896*kappa**2*t**2*v0**3 + 56*kappa*nu**3*rho*t**2*theta + 40*kappa*nu**3*rho*t**2*v0 + 32*kappa*nu**2*rho**2*t**2*theta*v0 - 288*kappa*nu**2*rho**2*t**2*v0**2 - 32*kappa*nu**2*t**2*theta*v0 + 160*kappa*nu**2*t**2*v0**2 + 640*kappa*nu*rho*t**2*theta*v0**2 - 896*kappa*nu*rho*t**2*v0**3 + 192*kappa*nu*rho*t*theta*v0 - 384*kappa*nu*rho*t*v0**2 + 1152*kappa*t*theta*v0**2 - 1152*kappa*t*v0**3 + 3*nu**5*rho*t**2 - 24*nu**4*rho**2*t**2*v0 + 6*nu**4*t**2*v0 + 48*nu**3*rho**3*t**2*v0**2 - 48*nu**3*rho*t**2*v0**2 - 72*nu**3*rho*t*v0 + 96*nu**2*rho**2*t**2*v0**3 + 288*nu**2*rho**2*t*v0**2 - 144*nu**2*t*v0**2 + 576*nu*rho*t*v0**3 + 384*nu*rho*v0**2 + 768*v0**3)**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))**3 + (1/384)*t*x*(((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))/v0**2)**(-2.0)*(v0**2*x**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0)) - 3)*(-128*kappa**2*nu*rho*t**2*theta*v0 + 192*kappa**2*nu*rho*t**2*v0**2 + 384*kappa**2*t**2*theta**2*v0 - 1280*kappa**2*t**2*theta*v0**2 + 896*kappa**2*t**2*v0**3 + 56*kappa*nu**3*rho*t**2*theta + 40*kappa*nu**3*rho*t**2*v0 + 32*kappa*nu**2*rho**2*t**2*theta*v0 - 288*kappa*nu**2*rho**2*t**2*v0**2 - 32*kappa*nu**2*t**2*theta*v0 + 160*kappa*nu**2*t**2*v0**2 + 640*kappa*nu*rho*t**2*theta*v0**2 - 896*kappa*nu*rho*t**2*v0**3 + 192*kappa*nu*rho*t*theta*v0 - 384*kappa*nu*rho*t*v0**2 + 1152*kappa*t*theta*v0**2 - 1152*kappa*t*v0**3 + 3*nu**5*rho*t**2 - 24*nu**4*rho**2*t**2*v0 + 6*nu**4*t**2*v0 + 48*nu**3*rho**3*t**2*v0**2 - 48*nu**3*rho*t**2*v0**2 - 72*nu**3*rho*t*v0 + 96*nu**2*rho**2*t**2*v0**3 + 288*nu**2*rho**2*t*v0**2 - 144*nu**2*t*v0**2 + 576*nu*rho*t*v0**3 + 384*nu*rho*v0**2 + 768*v0**3)/v0 + v0**4*((1/96)*t*(144*kappa**2*nu*rho*t**2*theta**2 - 608*kappa**2*nu*rho*t**2*theta*v0 + 496*kappa**2*nu*rho*t**2*v0**2 + 384*kappa**2*t**2*theta**2*v0 - 992*kappa**2*t**2*theta*v0**2 + 608*kappa**2*t**2*v0**3 - 12*kappa*nu**3*rho*t**2*theta + 124*kappa*nu**3*rho*t**2*v0 + 384*kappa*nu**2*rho**2*t**2*theta*v0 - 664*kappa*nu**2*rho**2*t**2*v0**2 - 68*kappa*nu**2*t**2*theta*v0 + 124*kappa*nu**2*t**2*v0**2 + 496*kappa*nu*rho*t**2*theta*v0**2 - 608*kappa*nu*rho*t**2*v0**3 + 432*kappa*nu*rho*t*theta*v0 - 528*kappa*nu*rho*t*v0**2 + 480*kappa*t*theta*v0**2 - 480*kappa*t*v0**3 + 9*nu**5*rho*t**2 - 72*nu**4*rho**2*t**2*v0 + 6*nu**4*t**2*v0 + 144*nu**3*rho**3*t**2*v0**2 - 48*nu**3*rho*t**2*v0**2 - 90*nu**3*rho*t*v0 + 96*nu**2*rho**2*t**2*v0**3 + 360*nu**2*rho**2*t*v0**2 - 60*nu**2*t*v0**2 + 240*nu*rho*t*v0**3 + 288*nu*rho*v0**2 + 192*v0**3) + ((1/768)*kappa**3*nu**4*t**3*(56*kappa*rho**2*theta + 96*kappa*theta + 3*nu**2*rho**2 + 6*nu**2)*exp(3*kappa*t) + (1/192)*kappa**3*t*v0*(-32*kappa**2*nu**2*rho**2*t**2*theta + 48*kappa**2*nu**2*rho**2*t**2*v0 - 48*kappa**2*nu**2*t**2*theta + 112*kappa**2*nu**2*t**2*v0 + 384*kappa**2*nu*rho*t**2*theta**2 - 1664*kappa**2*nu*rho*t**2*theta*v0 + 1376*kappa**2*nu*rho*t**2*v0**2 + 1536*kappa**2*t**2*theta**2*v0 - 3968*kappa**2*t**2*theta*v0**2 + 2432*kappa**2*t**2*v0**3 + 10*kappa*nu**4*rho**2*t**2 + 24*kappa*nu**4*t**2 + 8*kappa*nu**3*rho**3*t**2*theta - 72*kappa*nu**3*rho**3*t**2*v0 - 16*kappa*nu**3*rho*t**2*theta + 96*kappa*nu**3*rho*t**2*v0 + 704*kappa*nu**2*rho**2*t**2*theta*v0 - 1280*kappa*nu**2*rho**2*t**2*v0**2 - 48*kappa*nu**2*rho**2*t**2*v0 + 48*kappa*nu**2*rho**2*t*theta - 96*kappa*nu**2*rho**2*t*v0 - 184*kappa*nu**2*t**2*theta*v0 + 344*kappa*nu**2*t**2*v0**2 + 48*kappa*nu**2*t*theta - 144*kappa*nu**2*t*v0 + 1376*kappa*nu*rho*t**2*theta*v0**2 + 192*kappa*nu*rho*t**2*theta*v0 - 1696*kappa*nu*rho*t**2*v0**3 - 288*kappa*nu*rho*t**2*v0**2 + 1152*kappa*nu*rho*t*theta*v0 - 1440*kappa*nu*rho*t*v0**2 + 1920*kappa*t*theta*v0**2 - 1920*kappa*t*v0**3 - 6*nu**5*rho**3*t**2 - 3*nu**5*rho*t**2 + 12*nu**4*rho**4*t**2*v0 - 48*nu**4*rho**2*t**2*v0 - 6*nu**4*rho**2*t**2 - 18*nu**4*rho**2*t + 9*nu**4*t**2*v0 - 24*nu**4*t + 144*nu**3*rho**3*t**2*v0**2 + 24*nu**3*rho**3*t**2*v0 + 72*nu**3*rho**3*t*v0 - 72*nu**3*rho*t**2*v0**2 - 24*nu**3*rho*t**2*v0 - 72*nu**3*rho*t*v0 + 144*nu**2*rho**2*t**2*v0**3 + 96*nu**2*rho**2*t**2*v0**2 + 672*nu**2*rho**2*t*v0**2 + 48*nu**2*rho**2*t*v0 + 96*nu**2*rho**2*v0 - 168*nu**2*t*v0**2 + 96*nu**2*v0 + 672*nu*rho*t*v0**3 + 192*nu*rho*t*v0**2 + 768*nu*rho*v0**2 + 64*t**2*theta**3 + 768*v0**3)*exp(3*kappa*t) + kappa**2*t**2*theta**2*v0*(-theta + v0)*exp(3*kappa*t) + kappa**2*t**2*theta**2*v0*(theta - v0)*exp(2*kappa*t) + 2*kappa*t*theta*v0*(-theta**2 + 2*theta*v0 - v0**2)*exp(2*kappa*t) + kappa*t*theta*v0*(theta**2 - 2*theta*v0 + v0**2)*exp(3*kappa*t) + kappa*t*theta*v0*(theta**2 - 2*theta*v0 + v0**2)*exp(kappa*t) + (1/3)*v0*(-theta**3 + 3*theta**2*v0 - 3*theta*v0**2 + v0**3)*exp(3*kappa*t) + v0*(-theta**3 + 3*theta**2*v0 - 3*theta*v0**2 + v0**3)*exp(kappa*t) + v0*(theta**3 - 3*theta**2*v0 + 3*theta*v0**2 - v0**3)*exp(2*kappa*t) + (1/3)*v0*(theta**3 - 3*theta**2*v0 + 3*theta*v0**2 - v0**3))*exp(-3*kappa*t)/(kappa**3*v0))*(v0**4*x**4/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))**2 - 6*v0**2*x**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0)) + 3)/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))**2 + 2 + (1/8)*v0**2*(v0**2*x**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0)) - 1)*(4*kappa**2*t**2*theta**2*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + kappa*nu**2*t*(theta - v0)*(theta**2 - 2*theta*v0 + 2*v0**2)*exp(2*kappa*t) + 8*kappa*t*theta*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(nu*rho - theta + v0)*exp(2*kappa*t) + 8*kappa*t*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(nu*rho*theta - nu*rho*v0 + theta**2 - theta*v0)*exp(kappa*t) + nu**2*v0**2*(theta - v0)*(log(v0/theta) - log((-theta*(1 - exp(kappa*t)) + v0)/theta))*exp(2*kappa*t) + nu**2*(-theta + 2*v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + nu**2*(theta - 2*v0)*(theta**2 - 2*theta*v0 + v0**2)*exp(kappa*t) + 4*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)**2 + 4*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(-4*nu*rho*theta + 2*nu*rho*v0 + theta**2 - 2*theta*v0 + v0**2)*exp(2*kappa*t) + 8*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*(2*nu*rho*theta - nu*rho*v0 - theta**2 + 2*theta*v0 - v0**2)*exp(kappa*t))*exp(-2*kappa*t)/(kappa**2*(theta - v0)*(theta**2 - 2*theta*v0 + v0**2)*((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))))*exp(-0.5*v0**2*x**2/((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0)))/(sqrt(pi)*s0*sqrt(((1/32)*kappa*nu**2*t**3*theta*(-4*kappa*theta - nu**2) + (1/64)*nu**2*t**2*v0*(8*kappa*nu*rho*t*theta + 8*kappa*theta + nu**2) + (1/192)*v0**2*(32*kappa**3*t**3*theta - 32*kappa**3*t**3*v0 - 8*kappa**2*nu**2*t**3 - 64*kappa**2*nu*rho*t**3*theta + 96*kappa**2*nu*rho*t**3*v0 - 96*kappa**2*t**2*theta + 96*kappa**2*t**2*v0 + 12*kappa*nu**3*rho*t**3 - 48*kappa*nu**2*rho**2*t**3*v0 + 24*kappa*nu**2*t**2 + 96*kappa*nu*rho*t**2*theta - 192*kappa*nu*rho*t**2*v0 + 192*kappa*t*theta - 192*kappa*t*v0 - 24*nu**3*rho*t**2 + 48*nu**2*rho**2*t**2*v0 - 48*nu**2*t + 192*nu*rho*t*v0 + 192*v0))/v0**2))

def pdf_shiftedGBM(x, t, s0, v0, r0, shift):
    return pdf_GBM(x - shift, t, s0, v0, r0)

def pdf_shiftedSquareRootProcess(x, t, s0, v0, r0, shift):
    return pdf_SquareRootProcess(x - shift, t, s0, v0, r0)

def pdf_shiftedSABR(x, t, s0, alpha, beta, nu, rho, shift):
    return pdf_SABR(x - shift, t, s0, alpha, beta, nu, rho)

def pdf_shiftedZABR(x, t, s0, alpha, beta, nu, rho, gamma, shift):
    return pdf_ZABR(x - shift, t, s0, alpha, beta, nu, rho, gamma)

def pdf_shiftedHeston(x, t, s0, v0, kappa, theta, rho, nu, shift):
    return pdf_Heston(x - shift, t, s0, v0, kappa, theta, rho, nu)

def my_plot(title, xlabel, ylabel, xdata, ydata, labels,
            xlim=None, ylim=None, savefile=None):
    plt.figure()
    plt.title(title)
    plt.rcParams['xtick.direction'] = 'in'
    plt.rcParams['ytick.direction'] = 'in'

    if xlim is not None:
        plt.xlim(xlim)

    if ylim is not None:
        plt.ylim(ylim)

    for x, y, l in zip(xdata, ydata, labels):
        plt.plot(x, y, label=l)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.tight_layout()
    plt.grid(linestyle='--', alpha=0.4)
    plt.legend()

    if savefile is not None:
        plt.savefig(savefile)
    plt.show()

def test_Heston():
    s0 = 100
    v0 = 0.16
    kappa = 10
    theta = 0.15
    rho = -0.8
    shift = 0.02 * 0
    nu = 0.01
    t = 1
    strikes = np.linspace(0.0001 - shift, 6 * sqrt(t), 2000)
    strikes = np.linspace(-300, 300, num=200) * 5e-01 + s0
    output_Heston = [pdf_shiftedHeston(K, t, s0, v0, kappa, theta, rho, nu, shift) for K in strikes]
    my_plot('PDF of Heston using WIC expansion', 'strike', 'pdf value',
            [strikes],
            [output_Heston],
            ['Heston PDF'],
            None, None, None)

def test_ZABR():
    forward = 0.0488
    alpha = 0.026
    beta = 0.5
    nu = 0.4
    rho = -0.1
    shift = 0.02
    t = 10
    strikes = np.linspace(0.0001 - shift, 0.2 * sqrt(t) / 2.5, 2000)

    output_SABR = [pdf_shiftedSABR(K, t, forward, alpha, beta, nu, rho, shift) for K in strikes]
    output_ZABR_05 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 0.9, shift) for K in strikes]
    output_ZABR_10 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 1.0, shift) for K in strikes]
    output_ZABR_15 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 1.5, shift) for K in strikes]
    output_ZABR_20 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 2.0, shift) for K in strikes]
    output_ZABR_25 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 2.5, shift) for K in strikes]
    output_ZABR_30 = [pdf_shiftedZABR(K, t, forward, alpha, beta, nu, rho, 3.0, shift) for K in strikes]

    my_plot('PDF of shifted ZABR using WIC expansion', 'strike', 'pdf value',
            [strikes, strikes, strikes, strikes, strikes, strikes, strikes],
            [output_SABR, output_ZABR_05, output_ZABR_10, output_ZABR_15, output_ZABR_20, output_ZABR_25, output_ZABR_30],
            ['Shifted SABR',
             'Shifted ZABR (gamma = 0.9)', 'Shifted ZABR (gamma = 1.0)',
             'Shifted ZABR (gamma = 1.5)', 'Shifted ZABR (gamma = 2.0)',
             'Shifted ZABR (gamma = 2.5)', 'Shifted ZABR (gamma = 3.0)'],
            None, None, './zabr.pdf')

class ImprovedDensity:
    def __init__(self, density_asymp=pdf_SABR, lower=72, upper=132, n=500, r=60, **params):
        self.TOLERANCE = 1e-12
        self.density_asymp = density_asymp
        self.n = n
        self.r = r
        self.lower = lower
        self.upper = upper
        self.params = params
        self.funct_improved = None
        self.support = np.linspace(0, 200, self.r)

    @staticmethod
    def n_mod_r(n, r):
        return n % r if n % r != 0 else r

    ## density function over Hilbert space
    def chi(self, x):
        Al = 0
        Ar = 0.1
        gamma = 1  # set for continuous chi
        T = 10
        sigma = 0.12
        m = 0.1
        if x < self.lower:
            return gamma * x
        elif self.lower < x and x < self.upper:
            return self.density_asymp(x, **self.params)
        elif self.upper < x:
            return Ar*1/np.sqrt(2*np.pi*T)*1/(x*sigma)*np.exp(-(np.log(x)-m)**2/(2*sigma**2*T))
        else:
            return 0

    def get_phi(self, x):
        divisor = self.chi(x)
        if np.abs(divisor) < self.TOLERANCE:
            return 0
        else:
            return self.density_asymp(x, **self.params) / divisor

    ## implementation of 3.13 not 3.16 or 3.17
    def execute_dylstra_algorithm(self):
        n = self.n
        r = self.r
        chi = self.chi
        e = np.zeros(r)
        func_values = np.zeros(r)
        for i in range(n):
            if i == 0:
                pass
                func_values = [self.density_asymp(x)/self.chi(x) for x in self.suuport]

            pass


if __name__  ==  '__main__':
    tmp = ImprovedDensity(t=10, s0=100, alpha=0.012, beta=0.5, nu=-0.1, rho=0.1)
    # test_ZABR()
    # test_Heston()
